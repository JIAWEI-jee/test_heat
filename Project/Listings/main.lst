C51 COMPILER V9.56.0.0   MAIN                                                              09/07/2020 17:25:35 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\user\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\hardwa
                    -re\DELAY;..\hardware\ADC;..\hardware\Flash;..\hardware\Uart;..\hardware\Key;..\hardware\Pwm;..\hardware\WDT;..\hardware\
                    -Timer;..\hardware\LCDdisplay;..\hardware\PID) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\mai
                    -n.obj)

line level    source

   1          /**
   2          * ************************************************************************************
   3          * @Examle Version   K8104
   4          * @Demo Version   V1.00.00
   5          * @Date       2020.6。23
   6          * ************************************************************************************
   7          *
   8          **/
   9          
  10          #define ALLOCATE_EXTERN
  11          #include "HC89F3541.H"
  12          #include "delay.h"
  13          #include "adc.h"
  14          #include "flash.h"
  15          #include "key.h"
  16          #include "uart.h"
  17          #include "pwm.h"
  18          #include "wdt.h"
  19          #include "timer.h"
  20          #include "lcddisplay.h"
  21          #include "PID.h"
  22          
  23          #define SKU 8104
  24          #define SOFT_VER "1.01.00"
  25          
  26          
  27          u16 adc_cnt = 0;
  28          u8  first_heat_std = 0;
  29          u8  error_std = 0;
  30          
  31          void Clock ( void );
  32          void Set_Temp ( void );
  33          void Controll_Heat ( void );
  34          //void Protect ( void );
  35          void Detection_Input(void);
  36          
  37          
  38          
  39          /***************************************************/
  40          /*
  41          函数名称；key_handle()
  42          函数功能：按键处理函数
  43          入口参数：null
  44          出口参数：null
  45          函数说明；处理按键返回的键值调整相应功能
  46          */
  47          /********************************************************/
  48          
  49          static void key_handle ( void )
  50          {
  51   1        u8 key_val = 0;
  52   1      
C51 COMPILER V9.56.0.0   MAIN                                                              09/07/2020 17:25:35 PAGE 2   

  53   1        if ( error_std == 0 )
  54   1      
  55   1        {
  56   2          key_val = key_scan();
  57   2        }
  58   1        else
  59   1        {
  60   2          key_val = 0;
  61   2        }
  62   1        if ( (key_val == KEY_1_PRES)&&(calibration_std == 0) )
  63   1        {
  64   2          KEY_printf ( " key_scan\r\n" );
  65   2          if ( get_device_state() == ON )
  66   2          {
  67   3            set_device_state ( OFF );
  68   3            set_pwm ( 0 );
  69   3          }
  70   2          else
  71   2          {
  72   3            set_device_state ( ON );
  73   3            set_time_sec();
  74   3            Set_Temp ( );
  75   3            //  gm_printf ( " spid.iSetVal = %d \r\n",  spid.iSetVal);
  76   3            first_heat_std = 1;
  77   3      
  78   3          }
  79   2        }
  80   1        else if ( get_device_state() == ON )
  81   1        {
  82   2      
  83   2      
  84   2      
  85   2          if ( key_val == KEY_2_PRES )
  86   2          {
  87   3      
  88   3            KEY_printf ( " KEY_2_PRES\r\n" );
  89   3            if ( flash_info.gap < GAP_H )
  90   3            {
  91   4              flash_info.gap++;
  92   4      
  93   4            }
  94   3            else
  95   3            {
  96   4              flash_info.gap = GAP_1;
  97   4            }
  98   3          
  99   3      
 100   3            first_heat_std = 1;
 101   3            Set_Temp ( );
 102   3            //  gm_printf ( " spid.iSetVal = %d \r\n",  spid.iSetVal);
 103   3            lcd_display_gap ( flash_info.gap );
 104   3            //set_time_sec();
 105   3            flah_save_data();
 106   3          }
 107   2          else if ( key_val == KEY_3_PRES ) //??
 108   2          {
 109   3      
 110   3            if ( flash_info.timer < 0x05 )
 111   3            {
 112   4              flash_info.timer++;
 113   4            }
 114   3            else
C51 COMPILER V9.56.0.0   MAIN                                                              09/07/2020 17:25:35 PAGE 3   

 115   3            {
 116   4              flash_info.timer = TIMER_ON;
 117   4            }
 118   3            if ( flash_info.gap > GAP_1 )
 119   3            {
 120   4              if ( flash_info.timer == TIMER_ON )
 121   4              {
 122   5                On_stay = 2;
 123   5              }
 124   4              else if ( flash_info.timer > TIMER_2H )
 125   4              {
 126   5                Gap_protect_std = 2;
 127   5              }
 128   4            }
 129   3          //  KEY_printf ( "timer:%d \r\n", ( u16 ) flash_info.timer );
 130   3            lcd_display_time ( flash_info.timer );
 131   3            set_time_sec();
 132   3            flah_save_data();
 133   3          }
 134   2        }
 135   1      }
 136          
 137          
 138          u16 calibration_temperature(u16 temper)
 139          {
 140   1        u8 temp1 = 0;
 141   1        if ( (usart_rx_flag == 2)&&(calibration_std == 1))
 142   1        { 
 143   2          temp1 = (u8)temper;
 144   2          usart_rx_flag = 0;
 145   2          flash_info.correct_std = 1;
 146   2      //    hal_uart_putchar(temp1);
 147   2      //    hal_uart_putchar(temper_val);
 148   2         if (temper_val > 15) 
 149   2         { 
 150   3          if (temper_val > temp1)
 151   3          {
 152   4            flash_info.correct_value = temper_val - temp1;
 153   4            flash_info.correct_sign = 1; //为正公差
 154   4          }
 155   3          else 
 156   3          {
 157   4           flash_info.correct_value = temp1 - temper_val;
 158   4            
 159   4            hal_uart_putchar(flash_info.correct_value);
 160   4           flash_info.correct_sign = 2; //为负公差
 161   4          } 
 162   3          if ((flash_info.correct_value < 2)||(flash_info.correct_value > 20))
 163   3          {
 164   4             flash_info.correct_value = 0;
 165   4             flash_info.correct_sign = 0;
 166   4          }
 167   3          flah_save_data();
 168   3          producte_send_cmd(0x02, 0x02);
 169   3         }
 170   2        }
 171   1          if (flash_info.correct_sign == 1)
 172   1        {
 173   2         return ((u16) (temper = temper + flash_info.correct_value) );
 174   2        }
 175   1        else if ( flash_info.correct_sign == 2)
 176   1        {
C51 COMPILER V9.56.0.0   MAIN                                                              09/07/2020 17:25:35 PAGE 4   

 177   2         return ((u16) (temper = temper - flash_info.correct_value) );
 178   2        }
 179   1        return ((u16) temper );
 180   1      
 181   1      } 
 182          
 183          
 184          
 185          u16 temp_calc ( u16 uRt,u16 uRw )
 186          {
 187   1        u16 i = 0;
 188   1        u16 basi_tmp = 40;
 189   1        
 190   1        float u1 = 0;
 191   1        float u3 = 0;
 192   1        if ( uRt < 90 )
 193   1        {
 194   2          return 0xff;
 195   2        }
 196   1      
 197   1        u1 = ( float ) uRt/1000;
 198   1        u3 =  ( float ) uRw /1000;
 199   1        u1 = (  u3 - u1 ) / u1 * 750;
 200   1        if ( u1 < 0 )
 201   1        {
 202   2          return 0xff;
 203   2        }
 204   1      //  gm_printf ( "R = %f  \r\n",u1 );
 205   1      
 206   1      
 207   1        if(u1 > Temperature_Value)
 208   1          {
 209   2               i = (u1 - Temperature_Value)/0.4;
 210   2                //gm_printf("over 40  i:%d \r\n",i);
 211   2            basi_tmp = basi_tmp + i;
 212   2            }
 213   1      
 214   1        else
 215   1          {
 216   2               i = (Temperature_Value - u1)/0.4;
 217   2              //  gm_printf("under 40  i:%d \r\n",i);
 218   2            basi_tmp = basi_tmp - i;
 219   2            }
 220   1          
 221   1      //  gm_printf("basi_tmp:%d \r\n",basi_tmp);
 222   1      if (flash_info.gap == GAP_3)
 223   1            basi_tmp = basi_tmp - 5;
 224   1          
 225   1        return  basi_tmp;
 226   1      }
 227          
 228          
 229          /*********************************************************/
 230          /*
 231          函数名称；temperature_handle()
 232          函数功能：温度处理函数
 233          入口参数：null
 234          出口参数：null
 235          函数说明；根据ADC侦测到的值算出温度值，通过温度的值进行温度控制
 236          */
 237          /********************************************************/
 238          
C51 COMPILER V9.56.0.0   MAIN                                                              09/07/2020 17:25:35 PAGE 5   

 239          void temperature_handle ( void )
 240          {
 241   1        u16 temp = 0;
 242   1        u16 adc_val1 = 0,adc_val2 = 0;
 243   1      
 244   1        adc_cnt++;
 245   1      
 246   1        if ( adc_cnt >= 50000 )
 247   1        {
 248   2          adc_cnt = 0;
 249   2          get_voltage ( &adc_val1,&adc_val2 );
 250   2      
 251   2        //  KEY_printf ( "adv1 = %d adv2 =%d \r\n",adc_val1,adc_val2 );  //pjw set
 252   2          temp = temp_calc ( adc_val1, adc_val2 );
 253   2        //  KEY_printf ( "temp val:%d \r\n",temp );
 254   2            temp =  calibration_temperature(temp);
 255   2          KEY_printf ( "%d \r\n",temp );
 256   2      
 257   2          if (adc_val1 > 90)  //adc_val1 > 50
 258   2          {
 259   3            if ( get_device_state() == ON )
 260   3            {
 261   4              lcd_off( ON );
 262   4               if ( first_heat_std == 1 )
 263   4              {
 264   5                first_heat_std = 0;
 265   5                if ( temp > 50 )
 266   5                {
 267   6                  Heat_start_std = 0;
 268   6                  heat_step = 0;
 269   6                //  KEY_printf ( "first_heat_std heat_step = 0; \r\n" );  //pjw set
 270   6                }
 271   5                else
 272   5                {
 273   6                  Heat_start_std = 1;
 274   6                  heat_step = 1;
 275   6                //  KEY_printf ( "first_heat_std heat_step = 1; \r\n" );  //pjw set
 276   6                }
 277   5              }
 278   4      
 279   4              spid.iCurVal = temp*10;
 280   4              PID_Operation ();
 281   4              lcd_display_time ( flash_info.timer );
 282   4              lcd_display_gap ( flash_info.gap );
 283   4              Controll_Heat (  );
 284   4            }
 285   3            else
 286   3            {
 287   4                   
 288   4                    if (calibration_std == 1)
 289   4              {
 290   5                  set_pwm ( 0 );
 291   5                lcd_clear_all();
 292   5                   
 293   5                lcd_cailbration ();
 294   5              }
 295   4              else
 296   4              { 
 297   5            
 298   5              lcd_off( OFF );
 299   5              set_pwm ( 0 );
 300   5              lcd_clear_all();
C51 COMPILER V9.56.0.0   MAIN                                                              09/07/2020 17:25:35 PAGE 6   

 301   5                
 302   5              } 
 303   4                   
 304   4            }
 305   3            error_std = 0;
 306   3          }
 307   2          else
 308   2          {
 309   3      
 310   3        calibration_std = 0;
 311   3            lcd_off( Error );
 312   3            lcd_error (  );
 313   3            error_std = 1;
 314   3          }
 315   2      
 316   2      
 317   2        }
 318   1      
 319   1      
 320   1      }
 321          
 322          
 323          
 324          
 325          
 326          
 327          
 328          
 329          void main()
 330          {
 331   1        Clock();
 332   1        uart_init();
 333   1        adc_init();
 334   1        EA = 1;
 335   1        time0_init ();            //打开总中断
 336   1        key_init();
 337   1        flash_init();
 338   1        PID_Init();
 339   1        pwm_init ( 200 );
 340   1        wdt_init ( 2 );
 341   1        LCD_Init();
 342   1        lcd_display_On();
 343   1        delay_ms ( 1200 );
 344   1        lcd_clear_all ();
 345   1        Detection_Input();
 346   1        
 347   1        gm_printf ( "\r\n==================================\r\n" );
 348   1        gm_printf ( "sku:K%d \r\n", ( u16 ) SKU );
 349   1        gm_printf ( "soft version:%s \r\n",SOFT_VER );
 350   1        gm_printf ( "gap %d \r\n", ( u16 ) flash_info.gap );      //档位
 351   1        gm_printf ( "timer %d \r\n", ( u16 ) flash_info.timer );  // 定时
 352   1        gm_printf ( "Input_Voltage_std = %d\r\n" ,Input_Voltage_std); //输入电压
 353   1        gm_printf ( "==================================\r\n" );
 354   1      
 355   1        while ( 1 )
 356   1        {
 357   2      
 358   2      
 359   2          temperature_handle();
 360   2          key_handle ();
 361   2        //  Protect ();
 362   2          clear_wdt();
C51 COMPILER V9.56.0.0   MAIN                                                              09/07/2020 17:25:35 PAGE 7   

 363   2      
 364   2        }
 365   1      }
 366          
 367          
 368          
 369          void Clock ( void )
 370          {
 371   1        /************************************系统初始化****************************************/
 372   1        CLKSWR = 0x51;            //选择内部高频RC为系统时钟，内部高频RC 2分频，Fosc=16MHz
 373   1        CLKDIV = 0x01;            //Fosc 1分频得到Fcpu，Fcpu=16MHz
 374   1      }
 375          
 376          
 377          /***************************************************/
 378          /*
 379          函数名称；Controll_Heat()
 380          函数功能：加热PWM控制
 381          入口参数：null
 382          出口参数：null
 383          函数说明；根据控制算法得到的占空比输出功率
 384          */
 385          /********************************************************/
 386          
 387          void Controll_Heat ( void )
 388          {
 389   1        //gm_printf ( " spid.iPriVal = %d \r\n",  spid.iPriVal);
 390   1        u8 heat_step_val = 100;
 391   1        if (Input_Voltage_std == V_24_status)
 392   1          {
 393   2                spid.iPriVal = spid.iPriVal/2;   
 394   2                heat_step_val = 50;
 395   2            }
 396   1        if (heat_step == 1)
 397   1          {
 398   2            set_pwm (heat_step_val);
 399   2          }
 400   1        else if (heat_step == 0)
 401   1          
 402   1          {
 403   2             set_pwm ((u8) spid.iPriVal);  //(u8) spid.iPriVal
 404   2          }
 405   1      }
 406          
 407          /***************************************************/
 408          /*
 409          函数名称；Set_Temp()
 410          函数功能：设定目标温度
 411          入口参数：null
 412          出口参数：null
 413          函数说明；根据不同档位设定要加热到的目标温度
 414          */
 415          /********************************************************/
 416          
 417          void Set_Temp ( void )
 418          {
 419   1      
 420   1      
 421   1        switch ( flash_info.gap )
 422   1        {
 423   2          case GAP_WARM:
 424   2      
C51 COMPILER V9.56.0.0   MAIN                                                              09/07/2020 17:25:35 PAGE 8   

 425   2            break;
 426   2          case GAP_1:
 427   2            spid.iSetVal = GAP_1_temp*10;
 428   2            break;
 429   2          case GAP_2:
 430   2            spid.iSetVal = GAP_2_temp*10;
 431   2            break;
 432   2          case GAP_3:
 433   2            spid.iSetVal = GAP_3_temp*10;
 434   2            break;
 435   2          case GAP_H:
 436   2            spid.iSetVal = GAP_4_temp*10;
 437   2            break;
 438   2        }
 439   1      }
 440          
 441          /*********************************************************/
 442          /*
 443          函数名称；Protect()
 444          函数功能：PID运算
 445          入口参数：null
 446          出口参数：null
 447          函数说明；大于Gap1档位情况下加热超过2小时会跳到Gap1
 448          */
 449          /********************************************************/
 450          //void Protect ( void )
 451          //{
 452          //  if ( over_rang_time_std == 1 )
 453          //  {
 454          //    if ( flash_info.gap > GAP_1 )
 455          //    {
 456          //      flash_info.gap = GAP_1;
 457          //      Set_Temp ( );
 458          //      flah_save_data();
 459          //      over_rang_time_std = 0;
 460          //    }
 461          //  }
 462          //}
 463          
 464          
 465          void Detection_Input(void)
 466          {
 467   1        u16 input = 0;
 468   1       input = Detection_Input_Voltage( );
 469   1       if (input > 1600)
 470   1        {
 471   2        //gm_printf ( "input24 = %d\r\n" ,input); //输入电压
 472   2        Input_Voltage_std = V_24_status;
 473   2        }
 474   1       else 
 475   1        {
 476   2        //gm_printf ( "input12 = %d\r\n" ,input); //输入电压
 477   2        Input_Voltage_std = V_12_status;
 478   2        }
 479   1      }
 480          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1447    ----
   CONSTANT SIZE    =    193    ----
   XDATA SIZE       =      4      23
C51 COMPILER V9.56.0.0   MAIN                                                              09/07/2020 17:25:35 PAGE 9   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
