C51 COMPILER V9.56.0.0   TIMER                                                             11/04/2020 11:07:52 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\hardware\Timer\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\hardware\DELAY;..\hardware\ADC;..\hardware\Flash;..\hardware\Uart;..\hardware\Key;..\hardware\Pwm;..\hardware\WDT;.
                    -.\hardware\Timer;..\hardware\LCDdisplay;..\hardware\PID) DEBUG OBJECTEXTEND PRINT(.\Listings\timer.lst) TABS(2) OBJECT(.
                    -\Objects\timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "flash.h"
   3          #include "uart.h"
   4          #include "lcddisplay.h"
   5          #include "key.h"
   6          //----------------time---------------
   7          u16 time_cnt = 0;
   8          u16 time_sec = 0;
   9          u16 cnt_heat_time = 0;
  10          u8 over_rang_time_std = 0;
  11          u8 Gap_protect_std = 0 ;
  12          u8 On_stay = 0;
  13          
  14          u8 Heat_start_std = 0;
  15          u16 time_heat = 0;
  16          u16 temp_time = 0 ,cail_cnt = 0 ;
  17          u8  heat_step = 0;
  18          led_info LED = {0,0};
  19          
  20          void led_set_on(void)
  21          {
  22   1        LED.led_std = 1;
  23   1        LED.led_time_cnt = 0;
  24   1      }
  25          void led_set_off(void)
  26          {
  27   1        LED.led_std = 0;
  28   1        LED.led_time_cnt = 0;
  29   1      }
  30          
  31          static void led_time(void)
  32          {
  33   1        if( LED.led_std == 1)
  34   1        {
  35   2          LED_IO = 1;
  36   2          if (++LED.led_time_cnt > LED_ON_TIME)
  37   2          {
  38   3            LED_IO = 0;
  39   3             LED.led_std = 0;
  40   3            LED.led_time_cnt = 0;
  41   3          }
  42   2        
  43   2        }
  44   1      else
  45   1      {
  46   2       LED_IO = 0;
  47   2      }
  48   1      
  49   1      }
  50          
  51          void set_time_sec_val ( u16 sec )
  52          {
C51 COMPILER V9.56.0.0   TIMER                                                             11/04/2020 11:07:52 PAGE 2   

  53   1        time_sec = sec;
  54   1        time_cnt = 0;
  55   1        gm_printf ( "set time second:%d\r\n",sec );
  56   1      }
  57          
  58          
  59          static void set_heat_val ( void )
  60          {
  61   1        if ( Heat_start_std == 1 )
  62   1        {
  63   2          if ( ++time_heat > Heat_Value )
  64   2          {
  65   3            //KEY_printf ( "exchange_heat_value \r\n" );
  66   3            Heat_start_std = 0;
  67   3            time_heat = 0;
  68   3      
  69   3             heat_step = 0;
  70   3          }
  71   2        }
  72   1      }
  73          
  74          void set_time_sec ( void )
  75          {
  76   1        time_cnt = 0;
  77   1        if ( flash_info.timer == TIMER_ON )
  78   1        {
  79   2          time_sec = 0;
  80   2          cnt_heat_time = 0;
  81   2          temp_time = 0;
  82   2        }
  83   1        else if ( flash_info.timer == TIMER_0_5H )
  84   1        {
  85   2          time_sec = 30*60;
  86   2          cnt_heat_time = 0;
  87   2          temp_time = 0;
  88   2        }
  89   1        else if ( flash_info.timer == TIMER_1H )
  90   1        {
  91   2          time_sec = 60*60;
  92   2          cnt_heat_time = 0;
  93   2          temp_time = 0;
  94   2        }
  95   1        else if ( flash_info.timer == TIMER_2H )
  96   1        {
  97   2          time_sec = 2*60*60;
  98   2          cnt_heat_time = 0;
  99   2          temp_time = 0;
 100   2        }
 101   1        else if ( flash_info.timer == TIMER_4H )
 102   1        {
 103   2          time_sec = 4*60*60;
 104   2          cnt_heat_time = 0;
 105   2          temp_time = 0;
 106   2        }
 107   1        else if ( flash_info.timer == TIMER_8H )
 108   1        {
 109   2          time_sec = 8*60*60;
 110   2          cnt_heat_time = 0;
 111   2          temp_time = 0;
 112   2        }
 113   1        gm_printf ( "time second:%d \r\n",time_sec );
 114   1      }
C51 COMPILER V9.56.0.0   TIMER                                                             11/04/2020 11:07:52 PAGE 3   

 115          
 116          
 117          void time0_init ( void )
 118          {
 119   1        /**********************************TIM0配置初始化**************************************/
 120   1        TCON1 = 0x00;           //Tx0定时器时钟为Fosc/12
 121   1        TMOD = 0x00;            //16位重装载定时器/计数器
 122   1      
 123   1        //Tim0计算时间  = (65536 - 0xFACB) * (1 / (Fosc /Timer分频系数))
 124   1        //        = 1333 / (16000000 / 12)
 125   1        //        = 1 ms
 126   1      
 127   1        //定时1ms
 128   1        //反推初值  = 65536 - ((1/1000) / (1/(Fosc / Timer分频系数)))
 129   1        //        = 65536 - ((1/1000) / (1/(16000000 / 12)))
 130   1        //      = 65536 - 1333
 131   1        //      = 0xFACB
 132   1      //    TH0 = 0xCB;  10ms
 133   1      //  TL0 = 0xEB;
 134   1        TH0 = 0xF5;
 135   1        TL0 = 0x96;             //T0定时时间2ms     0x96     10ms   0xFB
 136   1        IE |= 0x02;             //打开T0中断
 137   1        TCON |= 0x10;           //使能T0
 138   1      }
 139          
 140          
 141          
 142          //10ms
 143          void TIMER0_Rpt ( void ) interrupt TIMER0_VECTOR
 144          {
 145   1        led_time();
 146   1        if ( get_device_state() == ON ) //flash_info.timer != TIMER_ON &&
 147   1        {
 148   2          time_cnt++;
 149   2          if ( time_cnt >= 500 )
 150   2          {
 151   3            set_heat_val();
 152   3      
 153   3      //      if ( On_stay == 2 )  // stay on 模式下进行保护
 154   3      //      {
 155   3      //        cnt_heat_time++;
 156   3      //        if ( cnt_heat_time > overrang_time )
 157   3      //        {
 158   3      //          On_stay = 0;
 159   3      //          cnt_heat_time = 0;
 160   3      //          over_rang_time_std = 1;
 161   3      //          //gm_printf ( "On_stay_overrang \r\n" );
 162   3      //        }
 163   3      
 164   3      //      }
 165   3            if ( time_sec > 0 )
 166   3            {
 167   4      
 168   4              time_sec--;
 169   4      //        if ( Gap_protect_std == 2 )
 170   4      //        {
 171   4      
 172   4      //          cnt_heat_time++;
 173   4      
 174   4      
 175   4      //          if ( cnt_heat_time > overrang_time )
 176   4      //          {
C51 COMPILER V9.56.0.0   TIMER                                                             11/04/2020 11:07:52 PAGE 4   

 177   4      //            over_rang_time_std = 1;
 178   4      //            Gap_protect_std = 0;
 179   4      //            cnt_heat_time = 0;
 180   4      //            //gm_printf ( "protect \r\n" );
 181   4      //          }
 182   4      //        }
 183   4            }
 184   3            else
 185   3            {
 186   4              if ( flash_info.timer != TIMER_ON )
 187   4              {
 188   5                set_device_state ( OFF );
 189   5                time_sec = 0;
 190   5                cnt_heat_time = 0;
 191   5                Gap_protect_std = 0;
 192   5                On_stay = 0;
 193   5                //ht1621_all_clear(); //定时时间到
 194   5                gm_printf ( "time off \r\n" );
 195   5              }
 196   4            }
 197   3            //  gm_printf("time_sec=%d \r\n",time_sec);
 198   3            time_cnt = 0;
 199   3          }
 200   2        }
 201   1        else if (calibration_std == 1)
 202   1        {
 203   2          if (++cail_cnt > cail_value)
 204   2          {
 205   3            calibration_std = 0;
 206   3            cail_cnt = 0;
 207   3            
 208   3          }
 209   2        }
 210   1        LCD_Display();
 211   1        
 212   1      }
 213          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    516    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =     20    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
